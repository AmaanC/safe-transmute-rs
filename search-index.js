var N = null;var searchIndex = {};
searchIndex["safe_transmute"]={"doc":"This crate contains checked implementations of transmutation procedures, some of which ensure memory safety.","items":[[5,"safe_transmute_many_permissive","safe_transmute","Transmute a byte slice into a sequence of values of the given type.",N,N],[5,"safe_transmute_many_pedantic","","Transmute a byte slice into a sequence of values of the given type.",N,N],[5,"safe_transmute_one_pedantic","","Transmute a byte slice into a single instance of a POD.",N,N],[5,"safe_transmute_many","","Transmute a byte slice into a sequence of values of the given type.",N,N],[5,"safe_transmute_one","","Transmute a byte slice into a single instance of a POD.",N,N],[5,"safe_transmute_vec_permissive","","Transform a byte vector into a vector of values.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[5,"safe_transmute_vec_pedantic","","Transform a byte vector into a vector of values.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[5,"safe_transmute_vec","","Transform a byte vector into a vector of values.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[0,"align","","Alignment checking primitives.",N,N],[5,"check_alignment","safe_transmute::align","Check whether the given data slice of `T`s is properly aligned for reading and writing as a slice of `U`s.",N,N],[0,"base","safe_transmute","Primitives for object and array transmutation.",N,N],[5,"from_bytes","safe_transmute::base","Convert a byte slice into a single instance of a `Copy`able type.",N,N],[5,"from_bytes_pedantic","","Convert a byte slice into a single instance of a `Copy`able type.",N,N],[5,"guarded_transmute_many","","View a byte slice as a slice of an arbitrary type.",N,N],[5,"guarded_transmute_many_permissive","","View a byte slice as a slice of an arbitrary type.",N,N],[5,"guarded_transmute_vec","","Transform a byte vector into a vector of an arbitrary type.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[5,"guarded_transmute_vec_permissive","","Transform a byte vector into a vector of an arbitrary type.",N,[[["vec",["u8"]]],["vec"]]],[0,"bool","safe_transmute","Functions for safe transmutation to `bool`.",N,N],[5,"bytes_are_bool","safe_transmute::bool","Makes sure that the bytes represent a sequence of valid boolean values.",N,N],[5,"safe_transmute_bool_permissive","","View a byte slice as a slice of boolean values.",N,N],[5,"guarded_transmute_bool_permissive","","View a byte slice as a slice of boolean values.",N,N],[5,"safe_transmute_bool_pedantic","","View a byte slice as a slice of boolean values.",N,N],[5,"guarded_transmute_bool_pedantic","","View a byte slice as a slice of boolean values.",N,N],[5,"safe_transmute_bool_vec_permissive","","Trasform a byte vector into a vector of bool.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[5,"guarded_transmute_bool_vec_permissive","","Trasform a byte vector into a vector of bool.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[5,"safe_transmute_bool_vec_pedantic","","Transform a byte vector into a vector of bool.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[5,"guarded_transmute_bool_vec_pedantic","","Transform a byte vector into a vector of bool.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[0,"error","safe_transmute","Detectable and recoverable-from transmutation precondition errors.",N,N],[3,"GuardError","safe_transmute::error","A slice boundary guard error, usually created by a `Guard`.",N,N],[12,"required","","The required amount of bytes for transmutation.",0,N],[12,"actual","","The actual amount of bytes.",0,N],[12,"reason","","Why this `required`/`actual`/`T` combo is an error.",0,N],[3,"UnalignedError","","Unaligned memory access error.",N,N],[12,"offset","","The required amount of bytes to discard at the front for the attempted transmutation to be successful.",1,N],[4,"Error","","A transmutation error. This type describes possible errors originating from operations in this crate.",N,N],[13,"Guard","","The data does not respect the target type's boundaries.",2,N],[13,"Unaligned","","The given data slice is not properly aligned for the target type.",2,N],[13,"InvalidValue","","The data contains an invalid value for the target type.",2,N],[4,"ErrorReason","","How the type's size compares to the received byte count and the transmutation function's characteristic.",N,N],[13,"NotEnoughBytes","","Too few bytes to fill even one instance of a type.",3,N],[13,"TooManyBytes","","Too many bytes to fill a type.",3,N],[13,"InexactByteCount","","The byte amount received is not the same as the type's size.",3,N],[11,"description","","Retrieve a human readable description of the reason.",3,[[["self"]],["str"]]],[0,"guard","safe_transmute","The `guard` module exposes an API for memory boundary checking.",N,N],[3,"SingleValueGuard","safe_transmute::guard","Single value guard: The byte slice must have exactly enough bytes to fill a single instance of a type.",N,N],[3,"PedanticGuard","","Pedantic guard: The byte slice must have at least enough bytes to fill a single instance of a type, and should not have extraneous data.",N,N],[3,"AllOrNothingGuard","","An all-or-nothing guard: The byte slice should not have extraneous data, but can be empty, unlike `PedanticGuard`.",N,N],[3,"SingleManyGuard","","A single-or-many guard: The byte slice must have at least enough bytes to fill a single instance of a type, and extraneous data is ignored.",N,N],[3,"PermissiveGuard","","Permissive guard: The resulting slice would have as many instances of a type as will fit, rounded down. Therefore, this guard will never yield an error.",N,N],[8,"Guard","","The trait describes types which define boundary checking strategies. See the module-level documentation for more details.",N,N],[10,"check","","Check the size of the given byte slice against a particular type.",4,N],[0,"pod","safe_transmute","Plain data object safe transmute",N,N],[5,"guarded_transmute_pod","safe_transmute::pod","Transmute a byte slice into a single instance of a POD.",N,N],[5,"guarded_transmute_pod_pedantic","","Transmute a byte slice into a single instance of a POD.",N,N],[5,"guarded_transmute_pod_many","","Transmute a byte slice into a single instance of a POD.",N,N],[5,"guarded_transmute_pod_many_permissive","","View a byte slice as a slice of a POD type.",N,N],[5,"guarded_transmute_pod_many_pedantic","","View a byte slice as a slice of POD.",N,N],[5,"guarded_transmute_pod_vec","","Transform a byte vector into a vector of POD.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[5,"guarded_transmute_pod_vec_permissive","","Transform a byte vector into a vector of POD.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[5,"guarded_transmute_pod_vec_pedantic","","Transform a byte vector into a vector of POD.",N,[[["vec",["u8"]]],["result",["vec","error"]]]],[8,"PodTransmutable","","Type that can be non-`unsafe`ly transmuted into",N,N],[0,"util","safe_transmute","Module containing various utility functions.",N,N],[5,"designalise_f32","safe_transmute::util","If the specified 32-bit float is a signaling NaN, make it a quiet NaN.",N,[[["f32"]],["f32"]]],[5,"designalise_f64","","If the specified 64-bit float is a signaling NaN, make it a quiet NaN.",N,[[["f64"]],["f64"]]],[5,"from_bits_f32_designalised","","Reinterpret the given bits as a 32-bit float. If the specified word is a signaling NaN once interpreted, make it a quiet NaN.",N,[[["u32"]],["f32"]]],[5,"from_bits_f64_designalised","","Reinterpret the given bits as a 64-bit float. If the specified word is a signaling NaN once interpreted, make it a quiet NaN.",N,[[["u64"]],["f64"]]],[0,"to_bytes","safe_transmute","Functions for transmutation from a concrete type to bytes.",N,N],[5,"guarded_transmute_to_bytes","safe_transmute::to_bytes","Transmute a single instance of an arbitrary type into a slice of its bytes.",N,N],[5,"guarded_transmute_to_bytes_many","","Transmute a slice of arbitrary types into a slice of their bytes.",N,N],[5,"safe_transmute_one_to_bytes","","Transmute a single instance of a POD type into a slice of its bytes.",N,N],[5,"guarded_transmute_to_bytes_pod","","Transmute a single instance of a POD type into a slice of its bytes.",N,N],[5,"safe_transmute_to_bytes","","Transmute a slice of arbitrary types into a slice of their bytes.",N,N],[5,"guarded_transmute_to_bytes_pod_many","","Transmute a slice of arbitrary types into a slice of their bytes.",N,N],[5,"guarded_transmute_to_bytes_vec","","Transmute a vector of elements of an arbitrary type into a vector of their bytes, using the same memory buffer as the former.",N,[[["vec"]],["vec",["u8"]]]],[5,"safe_transmute_to_bytes_vec","","Transmute a vector of POD types into a vector of their bytes, using the same memory buffer as the former.",N,[[["vec"]],["vec",["u8"]]]],[5,"guarded_transmute_to_bytes_pod_vec","","Transmute a vector of POD types into a vector of their bytes, using the same memory buffer as the former.",N,[[["vec"]],["vec",["u8"]]]],[11,"into","safe_transmute::error","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","safe_transmute::guard","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"check","","",5,N],[11,"check","","",6,N],[11,"check","","",7,N],[11,"check","","",8,N],[11,"check","","",9,N],[11,"eq","safe_transmute::error","",2,[[["self"],["error"]],["bool"]]],[11,"ne","","",2,[[["self"],["error"]],["bool"]]],[11,"eq","","",0,[[["self"],["guarderror"]],["bool"]]],[11,"ne","","",0,[[["self"],["guarderror"]],["bool"]]],[11,"eq","","",3,[[["self"],["errorreason"]],["bool"]]],[11,"eq","","",1,[[["self"],["unalignederror"]],["bool"]]],[11,"ne","","",1,[[["self"],["unalignederror"]],["bool"]]],[11,"from","","",2,[[["guarderror"]],["error"]]],[11,"from","","",2,[[["unalignederror"]],["error"]]],[11,"clone","","",2,[[["self"]],["error"]]],[11,"clone","","",0,[[["self"]],["guarderror"]]],[11,"clone","","",3,[[["self"]],["errorreason"]]],[11,"clone","","",1,[[["self"]],["unalignederror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"hash","","",0,N],[11,"hash","","",3,N],[11,"hash","","",1,N],[11,"description","","",2,[[["self"]],["str"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]]],"paths":[[3,"GuardError"],[3,"UnalignedError"],[4,"Error"],[4,"ErrorReason"],[8,"Guard"],[3,"SingleValueGuard"],[3,"PedanticGuard"],[3,"AllOrNothingGuard"],[3,"SingleManyGuard"],[3,"PermissiveGuard"]]};
initSearch(searchIndex);
