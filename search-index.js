var N=null,E="",T="t",U="u",searchIndex={};
var R=["safe_transmute","Transmute a byte slice into a sequence of values of the…","Transmute a byte slice into a single instance of a…","Convert a byte slice into a single instance of a…","transmute_many","transmute_many_permissive","View a byte slice as a slice of an arbitrary type.","transmute_vec","View a byte slice as a slice of boolean values.","result","View a byte slice as a slice of a trivially transmutable…","Transform a vector into a vector of another element type.","Transmute a slice of arbitrary types into a slice of their…","safe_transmute::error","to_string","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","borrow","typeid","safe_transmute::guard","guarderror","unalignederror","incompatiblevectargeterror","errorreason","formatter","description","GuardError","UnalignedError","IncompatibleVecTargetError","ErrorReason","SingleValueGuard","PedanticGuard","AllOrNothingGuard","SingleManyGuard","PermissiveGuard"];

searchIndex[R[0]]={"doc":"This crate contains checked implementations of…","i":[[5,R[5],R[0],R[1],N,N],[5,"transmute_many_pedantic",E,R[1],N,N],[5,"transmute_one_pedantic",E,R[2],N,N],[5,R[4],E,R[1],N,N],[5,"transmute_one",E,R[2],N,N],[5,R[7],E,"Transform a vector into a vector of values with the given…",N,[[["vec"]],[R[9],["vec","error"]]]],[0,"align",E,"Alignment checking primitives.",N,N],[5,"check_alignment","safe_transmute::align","Check whether the given data slice of `S`s is properly…",N,N],[0,"base",R[0],"Primitives for object and array transmutation.",N,N],[5,"from_bytes","safe_transmute::base",R[3],N,N],[5,"from_bytes_pedantic",E,R[3],N,N],[5,R[4],E,R[6],N,N],[5,R[5],E,R[6],N,N],[5,R[7],E,R[11],N,[[["vec"]],["vec"]]],[0,"bool",R[0],"Functions for safe transmutation to `bool`.",N,N],[5,"bytes_are_bool","safe_transmute::bool","Makes sure that the bytes represent a sequence of valid…",N,N],[5,"transmute_bool_permissive",E,R[8],N,N],[5,"transmute_bool_pedantic",E,R[8],N,N],[5,"transmute_bool_vec_permissive",E,"Trasform a byte vector into a vector of bool.",N,[[["vec",["u8"]]],[R[9],["vec","error"]]]],[5,"transmute_bool_vec_pedantic",E,"Transform a byte vector into a vector of bool.",N,[[["vec",["u8"]]],[R[9],["vec","error"]]]],[0,"error",R[0],"Detectable and recoverable-from transmutation precondition…",N,N],[3,R[30],R[13],"A slice boundary guard error, usually created by a `Guard`.",N,N],[12,"required",E,"The required amount of bytes for transmutation.",0,N],[12,"actual",E,"The actual amount of bytes.",0,N],[12,"reason",E,"Why this `required`/`actual`/`T` combo is an error.",0,N],[3,R[31],E,"Unaligned memory access error.",N,N],[12,"offset",E,"The required amount of bytes to discard at the front for…",1,N],[3,R[32],E,"Incompatible vector transmutation error.",N,N],[12,"vec",E,"The original vector.",2,N],[4,"Error",E,"A transmutation error. This type describes possible errors…",N,N],[13,"Guard",E,"The data does not respect the target type's boundaries.",3,N],[13,"Unaligned",E,"The given data slice is not properly aligned for the…",3,N],[13,"IncompatibleVecTarget",E,"The data vector's element type does not have the same size…",3,N],[13,"InvalidValue",E,"The data contains an invalid value for the target type.",3,N],[4,R[33],E,"How the type's size compares to the received byte count…",N,N],[13,"NotEnoughBytes",E,"Too few bytes to fill even one instance of a type.",4,N],[13,"TooManyBytes",E,"Too many bytes to fill a type.",4,N],[13,"InexactByteCount",E,"The byte amount received is not the same as the type's size.",4,N],[11,R[29],E,"Retrieve a human readable description of the reason.",4,[[["self"]],["str"]]],[11,"new",E,"Create an error with the given vector.",2,[[["vec"]],["self"]]],[11,"copy_unchecked",E,"Create a copy of the data and transmute it. As the new…",2,[[["self"]],["vec"]]],[11,"copy",E,"Create a copy of the data and transmute it. As `S` is…",2,[[["self"]],["vec"]]],[0,"guard",R[0],"The `guard` module exposes an API for memory boundary…",N,N],[3,R[34],R[23],"Single value guard: The byte slice must have exactly…",N,N],[3,R[35],E,"Pedantic guard: The byte slice must have at least enough…",N,N],[3,R[36],E,"An all-or-nothing guard: The byte slice should not have…",N,N],[3,R[37],E,"A single-or-many guard: The byte slice must have at least…",N,N],[3,R[38],E,"Permissive guard: The resulting slice would have as many…",N,N],[8,"Guard",E,"The trait describes types which define boundary checking…",N,N],[10,"check",E,"Check the size of the given byte slice against a…",5,N],[0,"trivial",R[0],"Transmutation of trivial objects",N,N],[5,"transmute_trivial","safe_transmute::trivial",R[2],N,N],[5,"transmute_trivial_pedantic",E,R[2],N,N],[5,"transmute_trivial_many",E,R[2],N,N],[5,"guarded_transmute_pod_many_permissive",E,R[10],N,N],[5,"guarded_transmute_pod_many_pedantic",E,R[10],N,N],[5,"transmute_trivial_vec",E,R[11],N,[[["vec"]],["vec"]]],[8,"TriviallyTransmutable",E,"Type that can be constructed from any combination of bytes.",N,N],[0,"util",R[0],"Module containing various utility functions.",N,N],[5,"designalise_f32","safe_transmute::util","If the specified 32-bit float is a signaling NaN, make it…",N,[[["f32"]],["f32"]]],[5,"designalise_f64",E,"If the specified 64-bit float is a signaling NaN, make it…",N,[[["f64"]],["f64"]]],[5,"from_bits_f32_designalised",E,"Reinterpret the given bits as a 32-bit float. If the…",N,[[["u32"]],["f32"]]],[5,"from_bits_f64_designalised",E,"Reinterpret the given bits as a 64-bit float. If the…",N,[[["u64"]],["f64"]]],[0,"to_bytes",R[0],"Functions for transmutation from a concrete type to bytes.",N,N],[5,"transmute_to_bytes_unchecked","safe_transmute::to_bytes","Transmute a single instance of an arbitrary type into a…",N,N],[5,"transmute_to_bytes_many_unchecked",E,R[12],N,N],[5,"transmute_one_to_bytes",E,"Transmute a single instance of a trivially transmutable…",N,N],[5,"transmute_to_bytes",E,R[12],N,N],[5,"guarded_transmute_to_bytes_pod_many",E,R[12],N,N],[5,"transmute_to_bytes_vec",E,"Transmute a vector of elements of an arbitrary type into a…",N,[[["vec"]],[R[9],["vec","error"]]]],[11,R[14],R[13],E,0,[[["self"]],["string"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,N],[11,R[17],E,E,0,[[[U]],[R[9]]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[["self"]],[R[22]]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[R[9]]]],[11,R[14],E,E,1,[[["self"]],["string"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,N],[11,R[17],E,E,1,[[[U]],[R[9]]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[["self"]],[R[22]]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[R[9]]]],[11,R[14],E,E,2,[[["self"]],["string"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,N],[11,R[17],E,E,2,[[[U]],[R[9]]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[20],E,E,2,[[["self"]],[R[22]]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[19],E,E,2,[[["self"]],[R[9]]]],[11,R[14],E,E,3,[[["self"]],["string"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,N],[11,R[17],E,E,3,[[[U]],[R[9]]]],[11,R[21],E,E,3,[[["self"]],[T]]],[11,R[20],E,E,3,[[["self"]],[R[22]]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[19],E,E,3,[[["self"]],[R[9]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,N],[11,R[17],E,E,4,[[[U]],[R[9]]]],[11,R[21],E,E,4,[[["self"]],[T]]],[11,R[20],E,E,4,[[["self"]],[R[22]]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[19],E,E,4,[[["self"]],[R[9]]]],[11,"from",R[23],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[17],E,E,6,[[[U]],[R[9]]]],[11,R[21],E,E,6,[[["self"]],[T]]],[11,R[20],E,E,6,[[["self"]],[R[22]]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[19],E,E,6,[[["self"]],[R[9]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[17],E,E,7,[[[U]],[R[9]]]],[11,R[21],E,E,7,[[["self"]],[T]]],[11,R[20],E,E,7,[[["self"]],[R[22]]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[19],E,E,7,[[["self"]],[R[9]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[17],E,E,8,[[[U]],[R[9]]]],[11,R[21],E,E,8,[[["self"]],[T]]],[11,R[20],E,E,8,[[["self"]],[R[22]]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[19],E,E,8,[[["self"]],[R[9]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[17],E,E,9,[[[U]],[R[9]]]],[11,R[21],E,E,9,[[["self"]],[T]]],[11,R[20],E,E,9,[[["self"]],[R[22]]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[19],E,E,9,[[["self"]],[R[9]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[17],E,E,10,[[[U]],[R[9]]]],[11,R[21],E,E,10,[[["self"]],[T]]],[11,R[20],E,E,10,[[["self"]],[R[22]]]],[11,R[18],E,E,10,[[["self"]],[T]]],[11,R[19],E,E,10,[[["self"]],[R[9]]]],[11,"check",E,E,6,N],[11,"check",E,E,7,N],[11,"check",E,E,8,N],[11,"check",E,E,9,N],[11,"check",E,E,10,N],[11,"eq",R[13],E,3,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,3,[[["self"],["error"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[24]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[24]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[27]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[25]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[25]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[26]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[26]]],["bool"]]],[11,"clone",E,E,3,[[["self"]],["error"]]],[11,"clone",E,E,0,[[["self"]],[R[24]]]],[11,"clone",E,E,4,[[["self"]],[R[27]]]],[11,"clone",E,E,1,[[["self"]],[R[25]]]],[11,"clone",E,E,2,[[["self"]],[R[26]]]],[11,"from",E,E,3,[[[R[24]]],["self"]]],[11,"from",E,E,3,[[[R[25]]],["self"]]],[11,"from",E,E,3,[[[R[26]]],["self"]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[9]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[9]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[9]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[9]]]],[11,"hash",E,E,3,N],[11,"hash",E,E,0,N],[11,"hash",E,E,4,N],[11,"hash",E,E,1,N],[11,"hash",E,E,2,N],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[9]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[9]]]],[11,"fmt",E,E,4,[[["self"],[R[28]]],[R[9]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[9]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[9]]]],[11,R[29],E,E,3,[[["self"]],["str"]]],[11,R[29],E,E,0,[[["self"]],["str"]]],[11,R[29],E,E,1,[[["self"]],["str"]]],[11,R[29],E,E,2,[[["self"]],["str"]]]],"p":[[3,R[30]],[3,R[31]],[3,R[32]],[4,"Error"],[4,R[33]],[8,"Guard"],[3,R[34]],[3,R[35]],[3,R[36]],[3,R[37]],[3,R[38]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);